BUILD_PROFILE ?=
BUILD_DIR = app/web/$(BUILD_PROFILE)
BIN_DIR = ./app
LIB_DIR = ./lib
PROJECT_NAME = app
PROJECT_TYPE = exe
BUILD_PREFIX =
BUILD_FILE_TYPE = .js
HEADS = $(shell find $(LIB_DIR) $(BIN_DIR) -name '*.hpp' -o -name '*.h')
TESTS = $(shell find ../tests/Group-04 -name '*.cpp')
CXX = em++
CXX_FLAGS_all ?= -std=c++23 -Wextra -Wall -I$(BIN_DIR) -I$(LIB_DIR) --bind -sMODULARIZE=1 -sEXPORT_NAME=Module
CXX_FLAGS_release = -O2 -DNDEBUG $(CXX_FLAGS_all)
CXX_FLAGS_debug = -ggdb $(CXX_FLAGS_all)

ifeq ($(BUILD_PROFILE),debug)
  CXX_FLAGS = $(CXX_FLAGS_debug)
else
  CXX_FLAGS = $(CXX_FLAGS_release)
endif

build: $(BUILD_DIR) $(HEADS)
	$(CXX) $(CXX_FLAGS) $(BUILD_FLAGS) -o $(BUILD_DIR)/$(BUILD_PREFIX)$(PROJECT_NAME)$(BUILD_FILE_TYPE) $(BIN_DIR)/main.cpp

clean:
	rm -rf $(BUILD_DIR)

install: build
	install -m 755 $(BUILD_DIR)/$(BUILD_PREFIX)$(PROJECT_NAME)$(BUILD_FILE_TYPE) /usr/lib/$(BUILD_PREFIX)$(PROJECT_NAME)$(BUILD_FILE_TYPE)

uninstall:
	rm -f /usr/lib/$(BUILD_PREFIX)$(PROJECT_NAME)$(BUILD_FILE_TYPE)

$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)
	echo "*" > $(BUILD_DIR)/.gitignore

format:
	echo $(HEADS) $(TESTS) | xargs clang-format --style=file -i

run:
	python -m http.server -d app/web
